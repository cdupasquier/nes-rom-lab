# utils/ppu_rom_viewer.py
import numpy as np
from PIL import Image
import streamlit as st
from utils.nes_palette import NES_PALETTE, DEMO_PALETTES


def decode_chr(chr_data: bytes):
    """
    D√©code la CHR-ROM en tuiles 8x8.
    Si la ROM utilise de la CHR-RAM (aucune donn√©e pr√©sente),
    on cr√©e un espace vide pour conserver la coh√©rence p√©dagogique.
    """
    # üß† Cas 1 : aucune donn√©e graphique trouv√©e (CHR-RAM)
    if len(chr_data) == 0:
        st.markdown("""
        <div style="
            background-color:#2a1f00;
            border-left:6px solid #ffb347;
            padding:16px 20px;
            border-radius:8px;
            color:#ffcc66;
            font-family:'JetBrains Mono', monospace;
            margin-bottom:20px;
        ">
        ‚ö†Ô∏è <strong>CHR-ROM absente ‚Äî Jeu utilisant une CHR-RAM</strong><br><br>
        Ce type de cartouche NES ne contient **aucune donn√©e graphique int√©gr√©e**.  
        Les tuiles sont g√©n√©r√©es dynamiquement en RAM par le CPU au d√©marrage du jeu.<br><br>
        üí° Un espace graphique vierge de 8 Ko est cr√©√© √† titre p√©dagogique.
        </div>
        """, unsafe_allow_html=True)

        # On cr√©e une fausse zone CHR de 8 Ko (512 tuiles de 16 octets)
        chr_data = bytes(8192)

    # üß± D√©codage standard des tuiles CHR (8√ó8)
    total_tiles = len(chr_data) // 16
    tiles = []
    for i in range(total_tiles):
        t = np.zeros((8, 8), dtype=np.uint8)
        low = np.frombuffer(chr_data[i*16:i*16+8], dtype=np.uint8)
        high = np.frombuffer(chr_data[i*16+8:i*16+16], dtype=np.uint8)
        for y in range(8):
            for x in range(8):
                lo = (low[y] >> (7 - x)) & 1
                hi = (high[y] >> (7 - x)) & 1
                t[y, x] = lo + (hi << 1)
        tiles.append(t)

    return tiles


# === Construction de Name Table simul√©e r√©aliste ===
def build_name_table(theme="mario", width=32, height=30):
    """Construit une table de tuiles NES imitant une sc√®ne connue."""
    table = np.zeros((height, width), dtype=np.uint16)

    if theme == "mario":
        for y in range(height):
            for x in range(width):
                if y > 25:
                    table[y, x] = 80 + (x % 4)  # sol
                elif y > 20:
                    table[y, x] = 64 + (x // 2) % 4  # briques
                elif y == 10 and x % 8 == 0:
                    table[y, x] = 100  # nuage
                else:
                    table[y, x] = 0  # ciel
    elif theme == "zelda":
        for y in range(height):
            for x in range(width):
                if y == 0 or y == height-1 or x == 0 or x == width-1:
                    table[y, x] = 32  # mur
                elif (x + y) % 7 == 0:
                    table[y, x] = 48  # arbre
                else:
                    table[y, x] = 16  # sol
    elif theme == "metroid":
        for y in range(height):
            for x in range(width):
                if y > 25:
                    table[y, x] = 96 + (x % 8)
                elif (x * y) % 11 == 0:
                    table[y, x] = 72
                else:
                    table[y, x] = 40
    else:
        table[:, :] = np.random.randint(0, 128, (height, width))
    return table


def render_rom_scene(chr_data: bytes):
    """Affiche un √©cran NES reconstruit avec une Name Table th√©matique."""
    st.header("üéÆ Reconstruction d‚Äôun √©cran NES r√©aliste")

    # ‚ö†Ô∏è Gestion CHR-RAM : message + g√©n√©ration automatique
    if len(chr_data) == 0:
        st.markdown("""
        <div style="
            background-color:#2a1f00;
            border-left:6px solid #ffb347;
            padding:16px 20px;
            border-radius:8px;
            color:#ffcc66;
            font-family:'JetBrains Mono', monospace;
            margin-bottom:20px;
        ">
        ‚ö†Ô∏è <strong>CHR-ROM absente ‚Äî Jeu utilisant une CHR-RAM</strong><br><br>
        Ce jeu ne contient aucune donn√©e graphique.  
        Le processeur NES √©crit les tuiles √† la vol√©e dans la m√©moire vid√©o (VRAM).  
        üí° Pour cette d√©mo, une <strong>CHR-ROM simul√©e</strong> de 8 Ko est affich√©e.
        </div>
        """, unsafe_allow_html=True)
                # üîß G√©n√©ration d'une CHR de secours avec motifs visibles
        fake_chr = np.zeros((8192,), dtype=np.uint8)
        for i in range(0, len(fake_chr), 16):
            tile = (i // 16) % 256
            for j in range(8):
                # motif diagonal simple pour visualiser quelque chose
                fake_chr[i + j] = ((tile >> (j % 8)) & 0xFF)
                fake_chr[i + 8 + j] = ((~tile >> (j % 8)) & 0xFF)
        chr_data = fake_chr.tobytes()

    # S√©lection du th√®me et de la palette
    theme = st.selectbox("üïπÔ∏è Th√®me √† simuler :", ["mario", "zelda", "metroid"])
    palette_name = st.selectbox(
        "üé® Palette NES √† utiliser :",
        list(DEMO_PALETTES.keys()),
        key=f"palette_{theme}_scene"
    )
    indices = DEMO_PALETTES[palette_name]
    palette = NES_PALETTE[indices]

    # D√©codage + construction
    tiles = decode_chr(chr_data)
    table = build_name_table(theme=theme)
    height, width = table.shape

    frame = np.zeros((height * 8, width * 8, 3), dtype=np.uint8)
    for y in range(height):
        for x in range(width):
            idx = table[y, x] % len(tiles)
            frame[y*8:(y+1)*8, x*8:(x+1)*8] = palette[tiles[idx]]

    img = Image.fromarray(frame, mode="RGB").resize((512, 480), Image.NEAREST)
    st.image(img, caption=f"√âcran simul√© ‚Äî th√®me : {theme}", use_container_width=True)

    # üß† Explications p√©dagogiques
    st.markdown(f"""
    ### üß† Explication
    Ce rendu simule une vraie sc√®ne NES :
    - **{theme.capitalize()}** applique une structure logique (sol, mur, ciel, obstacles).
    - Chaque tuile provient directement de la **CHR-ROM** (ou CHR-RAM simul√©e).
    - Le PPU assemble ces tuiles pour composer le d√©cor final.

    üí° Essaie de changer de palette ou de th√®me pour observer comment les teintes influencent l‚Äôambiance du jeu !
    """)

    st.info("""
    ü™Ñ Ce mode ne lit pas une ROM compl√®te : il r√©utilise les tuiles CHR  
    et les agence selon un sch√©ma typique d‚Äôun jeu NES pour visualiser le fonctionnement du PPU.
    """)
